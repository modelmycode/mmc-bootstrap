---
inject: true
to: libs/<%=contextFileName%>/<%=eventStreamFileName%>/src/lib/<%=eventStreamFileName%>-application-service.ts
after_marker: //start <%=TimeLineName%><%=CommandName%>+
before: //end <%=TimeLineName%><%=CommandName%>+
after_not_found: //commandHandlers
---
  //start <%=TimeLineName%><%=CommandName%>+
  @commandHandler({ name: '<%=ContextName%>.<%=TimeLineName%>.<%=CommandName%>' })
<%if (isStartOfEventStream) {%>
  async <%=timeLineName%><%=CommandName%>(command: <%=TimeLineName%><%=CommandName%>, { eventSourcing }: CommandContext): CommandReturnType<<%=TimeLineName%><%=CommandName%>> {
<%if (command.facts.find((item) => item.name===eventStreamIdentifier)) {-%>
    const <%=eventStreamIdentifier%>= command?.<%=eventStreamIdentifier%> ? command?.<%=eventStreamIdentifier%> : crypto.randomUUID();
<%} else {%>    const <%=eventStreamIdentifier%>= crypto.randomUUID()<%}%>
    await eventSourcing.create(<%=EventStreamName%>, <%=eventStreamIdentifier%>, (eventStream) => eventStream.<%=commandName%>(<%=eventStreamIdentifier%>, command<%if (serviceName) { -%>,<%=serviceName%>.<%=serviceMethodName%><%} -%>)
  );
  return { <%=eventStreamIdentifier%> };
  }<%} else {-%>
  async <%=timeLineName%><%=CommandName%>(command: <%=TimeLineName%><%=CommandName%>, { eventSourcing }: CommandContext) {
    await eventSourcing.load(<%=EventStreamName%>, command.<%=eventStreamIdentifier%>, (eventStream) =>
      eventStream.<%=commandName%>(command <%if (serviceName) { -%>,<%=serviceName%>.<%=serviceMethodName%><%} -%>)
    );
  }
<%}%>
  //end <%=TimeLineName%><%=CommandName%>+
