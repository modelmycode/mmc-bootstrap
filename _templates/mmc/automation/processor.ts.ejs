---
to: libs/<%=contextFileName%>/<%=timeLineFileName%>/src/lib/<%=commandFileName%>/<%=timeLineFileName%>-<%=automationFileName%>.ts
force: true
---
import { Processor, automationFactory, eventHandler,messageBus,} from "@ebd-connect/cqrs-framework"
import {<%=TimeLineName%><%=CommandName %>,} from "./<%=timeLineFileName%>-<%=commandFileName%>.command";
import {<%queries[0].events.map((item) => {%><%=TimeLineName%><%=h.changeCase.pascalCase(item.name)-%>
,<%})-%>} from '@<%=contextFileName%>-backend/<%=timeLineFileName%>';

interface <%= h.changeCase.pascalCase(queries[0].name) %> {
<% queries[0].facts.map((fact) => { %>  <%= h.changeCase.camelCase(fact.name) %>?: <%= fact.dataType %>,<% }) -%>
}

export class <%=TimeLineName%><%= h.changeCase.pascalCase(automation.name) %>
implements Processor<<%= h.changeCase.pascalCase(queries[0].name) %>>
{
  private readonly automation = automationFactory.forProcessor(this)

  async process(data: <%= h.changeCase.pascalCase(queries[0].name) %>): Promise<void> {
    if (<% queries[0].facts.map((fact, i) => { %> data.<%= h.changeCase.camelCase(fact.name) %><%if (i < queries[0].facts.length-1) {%>&& <%}%><% }) -%>)
      await messageBus.execute(new <%=TimeLineName%><%= CommandName %>(
  <%command.facts.map((fact,i) => {if (fact.isIdentifier && events[0].isStartOfEventStream) {%>undefined ,<%} else {%>      data.<%=h.changeCase.camelCase(fact.name)%>,<%}})%>
      ))
  }
<% queries[0].events.map((event) => { %>
  @eventHandler({name: '<%=TimeLineName%><%=h.changeCase.pascalCase(event.name)%>'})
  async on<%=h.changeCase.pascalCase(event.name)%>(event: <%=TimeLineName%><%=h.changeCase.pascalCase(event.name)%>) {
  await this.automation.<%if (!event.outputEvent) {%>add(event.onBoardingId, {
  onBoardingId: event.onBoardingId,  email: event.email,
  })<%} else {%>onComplete(event.<%= h.changeCase.camelCase(event.facts[0]?.name) %>)<%}%>
  }<%})%>
}
