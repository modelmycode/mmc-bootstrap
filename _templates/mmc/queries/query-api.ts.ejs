---
to: libs/<%=contextFileName%>/<%=timeLineFileName%>/src/lib/<%=commandFileName%>/<%=timeLineFileName%>-<%=queryFileName%>.query.ts
force: true
---
import { Query, query, QueryDatabaseModel, queryHandler, eventHandler, QueryReturnType } from '@ebd-connect/cqrs-framework'
<% queries[queryIndex].events.map((item) => {-%>
import {   <%=TimeLineName%><%=h.changeCase.pascal(item.name)%>,} from '../../index'
<%})-%>

export interface I<%=TimeLineName%><%=QueryName%> {
<% queries[queriesIndex].facts.map( (item) => {%>  <%=h.changeCase.camel(item.name)%> : <%=item.dataType%>,
<% }) -%>
}

@query('<%=TimeLineName%><%=QueryName%>')
export class <%=TimeLineName%><%=QueryName%> implements Query {
  $responseType!: I<%=TimeLineName%><%=QueryName%> | null
  constructor(
<% queries[queriesIndex].facts.map( (item) => {%>    public readonly <%=h.changeCase.camel(item.name)%> : <%=item.dataType%>,
<% }) -%>
) {}
}

export const <%=timeLineName%><%=QueryName%>QueryDb
  = new QueryDatabaseModel< I<%=TimeLineName%><%=QueryName%> >('<%=timeLineFileName%>-<%=queryFileName%>')


export class <%=TimeLineName%><%=QueryName%>QueryHandlers {
@queryHandler({ name:'<%=TimeLineName%><%=QueryName%>'})
  async <%=timeLineName%><%=QueryName%>({<%=eventStreamIdentifier%>,}: <%=TimeLineName%><%=QueryName%>): QueryReturnType< <%=TimeLineName%><%=QueryName%> > {
    return <%=timeLineName%><%=QueryName%>QueryDb.find(<%=eventStreamIdentifier%>)
  }
}

export class <%=TimeLineName%><%=QueryName%>QueryProjector {
<% queries[queryIndex].events.map((item) => {-%>
  @eventHandler({name:'<%=h.changeCase.pascal(item.name)%>'})
  async on<%=TimeLineName%><%=h.changeCase.pascal(item.name)%>({<%=eventStreamIdentifier%>: id,...data}: <%=TimeLineName%><%=h.changeCase.pascal(item.name)%>) {
    await <%=timeLineName%><%=QueryName%>QueryDb.create(id, {<%=eventStreamIdentifier%>: id,...data})
  }
<%})-%>
}
